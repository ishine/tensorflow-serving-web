/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tensorflow_stream_executor_dnn_pb = require('../../../tensorflow/stream_executor/dnn_pb.js');
goog.object.extend(proto, tensorflow_stream_executor_dnn_pb);
goog.exportSymbol('proto.tensorflow.ConvolutionProto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.ConvolutionProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.ConvolutionProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.ConvolutionProto.displayName = 'proto.tensorflow.ConvolutionProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.ConvolutionProto.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.ConvolutionProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.ConvolutionProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.ConvolutionProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    input: (f = msg.getInput()) && tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.toObject(includeInstance, f),
    convDesc: (f = msg.getConvDesc()) && tensorflow_stream_executor_dnn_pb.ConvolutionDescriptorProto.toObject(includeInstance, f),
    convScale: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    sideValueScale: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    activation: jspb.Message.getFieldWithDefault(msg, 8, 0),
    inputAddress: jspb.Message.getFieldWithDefault(msg, 9, 0),
    filterAddress: jspb.Message.getFieldWithDefault(msg, 10, 0),
    outputAddress: jspb.Message.getFieldWithDefault(msg, 11, 0),
    biasAddress: jspb.Message.getFieldWithDefault(msg, 12, 0),
    sideInputAddress: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.ConvolutionProto}
 */
proto.tensorflow.ConvolutionProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.ConvolutionProto;
  return proto.tensorflow.ConvolutionProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.ConvolutionProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.ConvolutionProto}
 */
proto.tensorflow.ConvolutionProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.stream_executor.dnn.ConvolutionKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = new tensorflow_stream_executor_dnn_pb.TensorDescriptorProto;
      reader.readMessage(value,tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 3:
      var value = new tensorflow_stream_executor_dnn_pb.TensorDescriptorProto;
      reader.readMessage(value,tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 4:
      var value = new tensorflow_stream_executor_dnn_pb.TensorDescriptorProto;
      reader.readMessage(value,tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 5:
      var value = new tensorflow_stream_executor_dnn_pb.ConvolutionDescriptorProto;
      reader.readMessage(value,tensorflow_stream_executor_dnn_pb.ConvolutionDescriptorProto.deserializeBinaryFromReader);
      msg.setConvDesc(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConvScale(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSideValueScale(value);
      break;
    case 8:
      var value = /** @type {!proto.stream_executor.dnn.ActivationMode} */ (reader.readEnum());
      msg.setActivation(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInputAddress(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilterAddress(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOutputAddress(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBiasAddress(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSideInputAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.ConvolutionProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.ConvolutionProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.ConvolutionProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.ConvolutionProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      tensorflow_stream_executor_dnn_pb.TensorDescriptorProto.serializeBinaryToWriter
    );
  }
  f = message.getConvDesc();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      tensorflow_stream_executor_dnn_pb.ConvolutionDescriptorProto.serializeBinaryToWriter
    );
  }
  f = message.getConvScale();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSideValueScale();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getActivation();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getInputAddress();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getFilterAddress();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getOutputAddress();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getBiasAddress();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getSideInputAddress();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
};


/**
 * optional stream_executor.dnn.ConvolutionKind kind = 1;
 * @return {!proto.stream_executor.dnn.ConvolutionKind}
 */
proto.tensorflow.ConvolutionProto.prototype.getKind = function() {
  return /** @type {!proto.stream_executor.dnn.ConvolutionKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.stream_executor.dnn.ConvolutionKind} value */
proto.tensorflow.ConvolutionProto.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional stream_executor.dnn.TensorDescriptorProto input = 2;
 * @return {?proto.stream_executor.dnn.TensorDescriptorProto}
 */
proto.tensorflow.ConvolutionProto.prototype.getInput = function() {
  return /** @type{?proto.stream_executor.dnn.TensorDescriptorProto} */ (
    jspb.Message.getWrapperField(this, tensorflow_stream_executor_dnn_pb.TensorDescriptorProto, 2));
};


/** @param {?proto.stream_executor.dnn.TensorDescriptorProto|undefined} value */
proto.tensorflow.ConvolutionProto.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.tensorflow.ConvolutionProto.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tensorflow.ConvolutionProto.prototype.hasInput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional stream_executor.dnn.TensorDescriptorProto filter = 3;
 * @return {?proto.stream_executor.dnn.TensorDescriptorProto}
 */
proto.tensorflow.ConvolutionProto.prototype.getFilter = function() {
  return /** @type{?proto.stream_executor.dnn.TensorDescriptorProto} */ (
    jspb.Message.getWrapperField(this, tensorflow_stream_executor_dnn_pb.TensorDescriptorProto, 3));
};


/** @param {?proto.stream_executor.dnn.TensorDescriptorProto|undefined} value */
proto.tensorflow.ConvolutionProto.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.tensorflow.ConvolutionProto.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tensorflow.ConvolutionProto.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional stream_executor.dnn.TensorDescriptorProto output = 4;
 * @return {?proto.stream_executor.dnn.TensorDescriptorProto}
 */
proto.tensorflow.ConvolutionProto.prototype.getOutput = function() {
  return /** @type{?proto.stream_executor.dnn.TensorDescriptorProto} */ (
    jspb.Message.getWrapperField(this, tensorflow_stream_executor_dnn_pb.TensorDescriptorProto, 4));
};


/** @param {?proto.stream_executor.dnn.TensorDescriptorProto|undefined} value */
proto.tensorflow.ConvolutionProto.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.tensorflow.ConvolutionProto.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tensorflow.ConvolutionProto.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
 * @return {?proto.stream_executor.dnn.ConvolutionDescriptorProto}
 */
proto.tensorflow.ConvolutionProto.prototype.getConvDesc = function() {
  return /** @type{?proto.stream_executor.dnn.ConvolutionDescriptorProto} */ (
    jspb.Message.getWrapperField(this, tensorflow_stream_executor_dnn_pb.ConvolutionDescriptorProto, 5));
};


/** @param {?proto.stream_executor.dnn.ConvolutionDescriptorProto|undefined} value */
proto.tensorflow.ConvolutionProto.prototype.setConvDesc = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.tensorflow.ConvolutionProto.prototype.clearConvDesc = function() {
  this.setConvDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tensorflow.ConvolutionProto.prototype.hasConvDesc = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double conv_scale = 6;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getConvScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setConvScale = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double side_value_scale = 7;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getSideValueScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setSideValueScale = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional stream_executor.dnn.ActivationMode activation = 8;
 * @return {!proto.stream_executor.dnn.ActivationMode}
 */
proto.tensorflow.ConvolutionProto.prototype.getActivation = function() {
  return /** @type {!proto.stream_executor.dnn.ActivationMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.stream_executor.dnn.ActivationMode} value */
proto.tensorflow.ConvolutionProto.prototype.setActivation = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int64 input_address = 9;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getInputAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setInputAddress = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 filter_address = 10;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getFilterAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setFilterAddress = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 output_address = 11;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getOutputAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setOutputAddress = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 bias_address = 12;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getBiasAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setBiasAddress = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 side_input_address = 13;
 * @return {number}
 */
proto.tensorflow.ConvolutionProto.prototype.getSideInputAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.tensorflow.ConvolutionProto.prototype.setSideInputAddress = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


goog.object.extend(exports, proto.tensorflow);
