/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tensorflow.BinSummary', null, global);
goog.exportSymbol('proto.tensorflow.MemAllocatorStats', null, global);
goog.exportSymbol('proto.tensorflow.MemChunk', null, global);
goog.exportSymbol('proto.tensorflow.MemoryDump', null, global);
goog.exportSymbol('proto.tensorflow.SnapShot', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemAllocatorStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemAllocatorStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemAllocatorStats.displayName = 'proto.tensorflow.MemAllocatorStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemAllocatorStats.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemAllocatorStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemAllocatorStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemAllocatorStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    numAllocs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bytesInUse: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peakBytesInUse: jspb.Message.getFieldWithDefault(msg, 3, 0),
    largestAllocSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fragmentationMetric: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemAllocatorStats}
 */
proto.tensorflow.MemAllocatorStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemAllocatorStats;
  return proto.tensorflow.MemAllocatorStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemAllocatorStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemAllocatorStats}
 */
proto.tensorflow.MemAllocatorStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumAllocs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBytesInUse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeakBytesInUse(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLargestAllocSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFragmentationMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemAllocatorStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemAllocatorStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemAllocatorStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemAllocatorStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumAllocs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBytesInUse();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPeakBytesInUse();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLargestAllocSize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFragmentationMetric();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional int64 num_allocs = 1;
 * @return {number}
 */
proto.tensorflow.MemAllocatorStats.prototype.getNumAllocs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemAllocatorStats.prototype.setNumAllocs = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 bytes_in_use = 2;
 * @return {number}
 */
proto.tensorflow.MemAllocatorStats.prototype.getBytesInUse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.MemAllocatorStats.prototype.setBytesInUse = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 peak_bytes_in_use = 3;
 * @return {number}
 */
proto.tensorflow.MemAllocatorStats.prototype.getPeakBytesInUse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.MemAllocatorStats.prototype.setPeakBytesInUse = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 largest_alloc_size = 4;
 * @return {number}
 */
proto.tensorflow.MemAllocatorStats.prototype.getLargestAllocSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.MemAllocatorStats.prototype.setLargestAllocSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float fragmentation_metric = 5;
 * @return {number}
 */
proto.tensorflow.MemAllocatorStats.prototype.getFragmentationMetric = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.tensorflow.MemAllocatorStats.prototype.setFragmentationMetric = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.MemChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemChunk.displayName = 'proto.tensorflow.MemChunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestedSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    opName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    freedAtCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    actionCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inUse: jspb.Message.getFieldWithDefault(msg, 8, false),
    stepId: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemChunk}
 */
proto.tensorflow.MemChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemChunk;
  return proto.tensorflow.MemChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemChunk}
 */
proto.tensorflow.MemChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRequestedSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBin(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreedAtCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActionCount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInUse(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStepId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRequestedSize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBin();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOpName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFreedAtCount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getActionCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getInUse();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getStepId();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional uint64 address = 1;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setAddress = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 size = 2;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 requested_size = 3;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getRequestedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setRequestedSize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 bin = 4;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getBin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setBin = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string op_name = 5;
 * @return {string}
 */
proto.tensorflow.MemChunk.prototype.getOpName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.tensorflow.MemChunk.prototype.setOpName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 freed_at_count = 6;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getFreedAtCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setFreedAtCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 action_count = 7;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getActionCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setActionCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool in_use = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.MemChunk.prototype.getInUse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.tensorflow.MemChunk.prototype.setInUse = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint64 step_id = 9;
 * @return {number}
 */
proto.tensorflow.MemChunk.prototype.getStepId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.tensorflow.MemChunk.prototype.setStepId = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.BinSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.BinSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.BinSummary.displayName = 'proto.tensorflow.BinSummary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.BinSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.BinSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.BinSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.BinSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    bin: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalBytesInUse: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalBytesInBin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalChunksInUse: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalChunksInBin: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.BinSummary}
 */
proto.tensorflow.BinSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.BinSummary;
  return proto.tensorflow.BinSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.BinSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.BinSummary}
 */
proto.tensorflow.BinSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalBytesInUse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalBytesInBin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalChunksInUse(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalChunksInBin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.BinSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.BinSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.BinSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.BinSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTotalBytesInUse();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotalBytesInBin();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTotalChunksInUse();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTotalChunksInBin();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 bin = 1;
 * @return {number}
 */
proto.tensorflow.BinSummary.prototype.getBin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.BinSummary.prototype.setBin = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total_bytes_in_use = 2;
 * @return {number}
 */
proto.tensorflow.BinSummary.prototype.getTotalBytesInUse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.BinSummary.prototype.setTotalBytesInUse = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total_bytes_in_bin = 3;
 * @return {number}
 */
proto.tensorflow.BinSummary.prototype.getTotalBytesInBin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.BinSummary.prototype.setTotalBytesInBin = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total_chunks_in_use = 4;
 * @return {number}
 */
proto.tensorflow.BinSummary.prototype.getTotalChunksInUse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.BinSummary.prototype.setTotalChunksInUse = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 total_chunks_in_bin = 5;
 * @return {number}
 */
proto.tensorflow.BinSummary.prototype.getTotalChunksInBin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.BinSummary.prototype.setTotalChunksInBin = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.SnapShot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.SnapShot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.SnapShot.displayName = 'proto.tensorflow.SnapShot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.SnapShot.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.SnapShot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.SnapShot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.SnapShot.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.SnapShot}
 */
proto.tensorflow.SnapShot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.SnapShot;
  return proto.tensorflow.SnapShot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.SnapShot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.SnapShot}
 */
proto.tensorflow.SnapShot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActionCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.SnapShot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.SnapShot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.SnapShot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.SnapShot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional uint64 action_count = 1;
 * @return {number}
 */
proto.tensorflow.SnapShot.prototype.getActionCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.SnapShot.prototype.setActionCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 size = 2;
 * @return {number}
 */
proto.tensorflow.SnapShot.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.SnapShot.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.MemoryDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.MemoryDump.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.MemoryDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.MemoryDump.displayName = 'proto.tensorflow.MemoryDump';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.MemoryDump.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.MemoryDump.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.MemoryDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.MemoryDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    allocatorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    binSummaryList: jspb.Message.toObjectList(msg.getBinSummaryList(),
    proto.tensorflow.BinSummary.toObject, includeInstance),
    chunkList: jspb.Message.toObjectList(msg.getChunkList(),
    proto.tensorflow.MemChunk.toObject, includeInstance),
    snapShotList: jspb.Message.toObjectList(msg.getSnapShotList(),
    proto.tensorflow.SnapShot.toObject, includeInstance),
    stats: (f = msg.getStats()) && proto.tensorflow.MemAllocatorStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.MemoryDump}
 */
proto.tensorflow.MemoryDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.MemoryDump;
  return proto.tensorflow.MemoryDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.MemoryDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.MemoryDump}
 */
proto.tensorflow.MemoryDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllocatorName(value);
      break;
    case 2:
      var value = new proto.tensorflow.BinSummary;
      reader.readMessage(value,proto.tensorflow.BinSummary.deserializeBinaryFromReader);
      msg.addBinSummary(value);
      break;
    case 3:
      var value = new proto.tensorflow.MemChunk;
      reader.readMessage(value,proto.tensorflow.MemChunk.deserializeBinaryFromReader);
      msg.addChunk(value);
      break;
    case 4:
      var value = new proto.tensorflow.SnapShot;
      reader.readMessage(value,proto.tensorflow.SnapShot.deserializeBinaryFromReader);
      msg.addSnapShot(value);
      break;
    case 5:
      var value = new proto.tensorflow.MemAllocatorStats;
      reader.readMessage(value,proto.tensorflow.MemAllocatorStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.MemoryDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.MemoryDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.MemoryDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.MemoryDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllocatorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBinSummaryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tensorflow.BinSummary.serializeBinaryToWriter
    );
  }
  f = message.getChunkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tensorflow.MemChunk.serializeBinaryToWriter
    );
  }
  f = message.getSnapShotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tensorflow.SnapShot.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tensorflow.MemAllocatorStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string allocator_name = 1;
 * @return {string}
 */
proto.tensorflow.MemoryDump.prototype.getAllocatorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.MemoryDump.prototype.setAllocatorName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated BinSummary bin_summary = 2;
 * @return {!Array<!proto.tensorflow.BinSummary>}
 */
proto.tensorflow.MemoryDump.prototype.getBinSummaryList = function() {
  return /** @type{!Array<!proto.tensorflow.BinSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.BinSummary, 2));
};


/** @param {!Array<!proto.tensorflow.BinSummary>} value */
proto.tensorflow.MemoryDump.prototype.setBinSummaryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tensorflow.BinSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.BinSummary}
 */
proto.tensorflow.MemoryDump.prototype.addBinSummary = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tensorflow.BinSummary, opt_index);
};


proto.tensorflow.MemoryDump.prototype.clearBinSummaryList = function() {
  this.setBinSummaryList([]);
};


/**
 * repeated MemChunk chunk = 3;
 * @return {!Array<!proto.tensorflow.MemChunk>}
 */
proto.tensorflow.MemoryDump.prototype.getChunkList = function() {
  return /** @type{!Array<!proto.tensorflow.MemChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.MemChunk, 3));
};


/** @param {!Array<!proto.tensorflow.MemChunk>} value */
proto.tensorflow.MemoryDump.prototype.setChunkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tensorflow.MemChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.MemChunk}
 */
proto.tensorflow.MemoryDump.prototype.addChunk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tensorflow.MemChunk, opt_index);
};


proto.tensorflow.MemoryDump.prototype.clearChunkList = function() {
  this.setChunkList([]);
};


/**
 * repeated SnapShot snap_shot = 4;
 * @return {!Array<!proto.tensorflow.SnapShot>}
 */
proto.tensorflow.MemoryDump.prototype.getSnapShotList = function() {
  return /** @type{!Array<!proto.tensorflow.SnapShot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.SnapShot, 4));
};


/** @param {!Array<!proto.tensorflow.SnapShot>} value */
proto.tensorflow.MemoryDump.prototype.setSnapShotList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tensorflow.SnapShot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.SnapShot}
 */
proto.tensorflow.MemoryDump.prototype.addSnapShot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tensorflow.SnapShot, opt_index);
};


proto.tensorflow.MemoryDump.prototype.clearSnapShotList = function() {
  this.setSnapShotList([]);
};


/**
 * optional MemAllocatorStats stats = 5;
 * @return {?proto.tensorflow.MemAllocatorStats}
 */
proto.tensorflow.MemoryDump.prototype.getStats = function() {
  return /** @type{?proto.tensorflow.MemAllocatorStats} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.MemAllocatorStats, 5));
};


/** @param {?proto.tensorflow.MemAllocatorStats|undefined} value */
proto.tensorflow.MemoryDump.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.tensorflow.MemoryDump.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tensorflow.MemoryDump.prototype.hasStats = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.tensorflow);
